# Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
# You must write an algorithm with O(log n) runtime complexity.

# https://leetcode.com/problems/search-insert-position/

# Brute force approach

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        length=len(nums)
        if nums[length-1]<target:
            return length
        else:
            i=0
            while nums[i]<target:
                i+=1
            return i
            
# Optimized solution

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        l= 0
        r = (len(nums)-1)
        if target<nums[0]: return 0
        elif target>nums[r]: return r+1
        else:
            while l<=r:
                mid = (l+r)//2
                if nums[mid]<target:
                    l=mid+1              
                else:
                    r=mid-1

            return mid if nums[mid]>=target else mid+1

# Approach 3

class Solution:
    from bisect import bisect_left
    def searchInsert(self, nums: List[int], target: int) -> int:
        return bisect_left(nums, target)
